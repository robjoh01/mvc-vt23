{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block content %}
<div class="two-col-layout right">
    <main class="main">
        <h2>Report</h2>
        <article class="article">
            <h3 id="kmom01">kmom01</h3>
<pre>
<b>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</b>
Eftersom jag har började med C# sedan 2017, har jag då starka erfarenheter kring objektorientering programmering.

<b>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</b> Att då kunna några nyckelord, som <em>class</em>, <em>extends</em>, <em>namespace</em> och <em>use</em>. Där <em>namespace</em> används för att separera koden i olika områden. <em>Class</em> används för skapa en klass och <em>extends</em> används för ärva ett klass objekt som är redan skapad. Och <em>use</em> används för att använda objekt i som en komposition.

<b>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</b> Lite annorlunda jämfört med C# och C++, däremot finns det några likheter. Där språket känns bekant och enkelt att använda.

<b>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</b>

S.O.L.I.D. är något som alla programmering språk bör följa. Samt vad för funktioner PHP har och erbjuda. Och vilka design patterns man bör följa eller undvika. 

<b>Vilken är din TIL för detta kmom?</b> Jag lärde mig hur Symfony kan användas, samt hur man implementera Symfony i sitt projekt.
</pre>
            <h3 id="kmom02">kmom02</h3>
<pre>
<b>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</b>

* Arv (inheritance) är ett sätt där du kan ärva en klass genom barn klasser. Till exempel: Fordon -> Bil. På så sätt kan du bryta ner koden mer och göra mer specifik var koden tillhör.

* Komposition (composition) är ett sätt där du kan få fram metoder/variabler från en annan klass, men den klassen är inte kopplad i själva klassen. Till exempel: En bil har en motor, men motor kan fungera av sig själv och måste ej finnas i bilen.

* Interface är ett sätt där du kan ärva funktioner som måstes implementera. Till exempel, i bilen måste man kunna start motor. Däremot kan vi (programmerare) ändra funktionalitet.

* Trait är ett sätt för inkludera funktioner från en klass, men klassen arvs av andra klasser istället. Till exempel: vi vill ha information om vädret, men vi vill visa upp information i bilens konsol.

<b>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</p> Jag är delvis nöjd med koden. Eftersom jag är inte vann med PHP och hur PHP struktur fungera, kan det vara lite jobbig att förstå sig på. Och eftersom jag är vann med C# och C++ är det lite skillnader mellan programmeringsspråket.

<b>Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?</b> Ja, eftersom har tidigare erfarenheter inom C# och C++ hjälper detta mig mycket. Där man får träna på skriva objektorienterade kod.

<b>Vilken är din TIL för detta kmom?</b> Jag lärde mig hur man skriv objektorienterade kod i PHP, samt PHP syntax.
</pre>
            <h3 id="kmom03">kmom03</h3>
<pre>
<b>Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?</b>

Delvis, det hjälpte mig att få en bra grund och tankesättet. Däremot ändras koden väldigt mycket. Där jag kom på det var saker som jag glömde.

<b>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?</b>

Jag är delvis nöjd med implementation. Dock är jag lite missnöjd att jag inte kunde hitta ett sätt att visa upp "AI decision-making" med PHP router systemet. Där jag gör AI decision via en while-loop i backend, vilket blir svår att visa upp på frontend. Eftersom jag kör också en if statement i slutat av funktionen för kolla om AI har gått över 21 (vilket blir omedelbar för frontend).

<b>Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?</b>

Det känns bra. Som normal PHP kod, fast olika funktioner att hålla koll på. Samt olika routes som leder vart och returnerar vad.

<b>Vilken är din TIL för detta kmom?</b> Jag lärde mig hur man kunde jobba med ett kortspel, samt göra en struktur för ett PHP projekt.

Jag lärde mig också om PHP linter och hur det kunde hjälpa när man skriver PHP koder.
</pre>
            <h3 id="kmom04">kmom04</h3>
<pre>
<b>Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit och hur du upplever phpunit rent allmänt.</b>

Jag tog väldigt mycket om phpunit, samt hur enkelt och värdfullt vertyg var. Att den då visa upp din utvecklning i en fin hemsida med olika statisk på koden. Samt en overview, vilka kod delar som testat och många procect som kodtäcks.

<b>Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning?</b>

Jag lyckades nå runt mellan 90-95%, däremot fanns det några saker som blev lite jobbiga att testa. Till exempel en switch case och if statements.

<b>Upplever du din egen kod som “testbar kod” eller finns det delar i koden som är mer eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet?</b>

Eftersom jag fick ändra kod struktur i kmom03, fick jag också en bra struktur för att testa min kod. Jag valde att bryta ner koden, så att funktionalitet är i ett separerat klass. På så sätt, kan jag testa mig små funktioner och olika scenario för att se om koden fungera.

<b>Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, om så berätta lite hur du tänkte.</b>

Jag valde att skriva om koden litegrann, så att jag kunde få mer än 80-90% av godkänn. Till exempel, ville jag fixa en switch case. Däremot fick ett klagomeddelande från linter, som säger att den behöver default case, i fall den inte hittar ett case.

Annars, skriv jag om koden så att jag kunde kalla en funktion och uppfylla två funktioner i testning. Till exempel, för att fram många nummer av kort, istället för kalla en funktioner som returnera "count($this->cards)", jag kunde då istället anropa "getCards()" i funktionen. På så sätt kunde jag testa två funktioner i ett. Så, slut koden blir då: "count($this->getCards())".

<b>Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”.</b>

Där du kan anropa en funktion som anropa flera funktioner med små kod, därmed kan du testa flera typer av funktionen, genom en anrop.

Dock desto mer komplexitet en funktion har, desto mer tester får du göra. Till exempel, om ett värde kan få ett exception. Samt beroende på om det högt eller lågt värde, så kan exception ändras. Om värdet inte få ett exception, då måste skapa flera tester för testa den delen.

<b>Vilken är din TIL för detta kmom?</b>

Jag lärde mig hur PHP unit och PHP doc verktyg fungerade, samt hur man kunde använda det för testa sig kod och göra koden mer läsbar.
</pre>
            <h3 id="kmom05">kmom05</h3>
<pre>
<b>Gick det bra att jobba igenom övningen med Symfony och Doctrine. Något särskilt du tänkte/reagerade på under övningen?</b> Det gick rätt så bra. Det var lite problematisk med att lösa alla <em>lint</em> fel. Dock tror jag att man kan bara ignorera för tillfället.

<b>Berätta om din applikation och hur du tänkte när du byggde upp den. Tänkte du något speciellt på användargränssnittet?</b> Jag började med att göra en sammanfattning över vad jag behöver om databasen. Därefter påbörjade mig att bygga olika delarna. Jag skapade först en sida, där jag samlade all process. Och när jag märkte att det blev för mycket kod/funktionalitet på en sida, splittra jag upp koden till två olika sidor. Därmed kunde jag separera koden litegrann.

<b>Gick det bra att jobba med ORM i CRUD eller vad anser du om det, jämför gärna med andra sätt att jobba med databaser?</b> Det gick jättebra att jobba med ORM. Eftersom allt är mer simplifiera att använda, blir det betydligt lättare att jobba med. Dock kan det var lite svårt att ändra tabellerna efteråt. Till exempel, <em>lint</em> klagade på att "id" är ett lite namn för en  variabeln. Och när jag skulle ändra namnet på variabeln, fick jag massa problem.

<b>Vad är din uppfattning om ORM så här långt och relatera gärna till andra sätt att jobba med applikationskod mot databaser?</b> Det gick relativt bra, jämfört att det är många saker som händer i bakgrunden som man hoppa över. Till exempel, att man inte behöver fixa databas server och lägga till massa tabeller och sånt. Hittills verkar som allt fungera perfekt.

<b>Vilken är din TIL för detta kmom?</b> Jag lärde mig hur man kunde koppla SQL databas med Symfony. Samt hur man kunde använda Doctrine för hjälpa till processen.
</pre>
            <h3 id="kmom06">kmom06</h3>
<pre>
<b>Hur uppfattade du verktyget phpmetrics och fann du några särskilda bitar mer värdefulla än andra? Var det några särskilda metrics eller bilder du uppskattade?</b>

phpmetrics var ett intressant verktyg, där den visar upp värdefulla information. Däremot hade jag strul att få igenom verktyget. Verktyg anropade packagist.org, vilket min internet uppkoppling hade problem med. Det tog mellan 20 minuter och upp till 50 minuter att köra verktyget. Däremot tog det bara mellan 1-2 sekunder för att läsa in koden.

<b>Berätta hur det gick att integrera med Scrutinizer och vilken är din första känsla av verktyget och dess badges? Vilken kodtäckning och kodkvalitet fick du efter första bygget?</b>

Scrutinizer var lite mer enklare att förstå. Där jag hade väldigt lite poäng värde, med anledning var till att jag inte exkludera olika mappar. Vilket hade då dålig kodkvalitet.

Badges var enkelt att förstå, där det generar en bild beroende på resultatet.

<b>Hur är din egen syn på kodkvalitet, berätta lite om den? Tror du man kan man påvisa kodkvalitet i någon viss mån med badges eller vad tror du?</b>

Kodkvalitet är har många idéer och principer, där man ska skriva sin kod på ett rätt sätt. Det vill säga att kod komplexitet är litet och koden är också testbar.

Kodkvalitet kan vara bra att jämföra, däremot hindrar det också att skriva sin kod och lägga mer tid på att fin justera koden istället. Samt, om jag har många libraries/frameworks som jag använder eller projekt är stort att det finns många delar av kod, kan det var kanske en dålig idé och börja använda sig utav kodkvalitet. I så fall, ska man implementera en bra kodkvalitet väldigt tidigt i projekts undergång.

<b>Vilken är din TIL för detta kmom?</b> Jag lärde mig hur jag kunde använda <em>phpmetrics</em> och <em>Scrutinizer</em>. Jag lärde mig också om de sex C:na. Samt hur man kan skriva en bra kodkvalitet.
</pre>
            <h3 id="kmom10">kmom10</h3>
<pre>

<h4>Krav 1-3</h4>
<pre>
Jag på började med att skapa projekt sidan och hade boilerplate struktur, där jag kunde se hur jag skulle lägga upp projektet. Därefter började jag skriva "PokerGame" klassen, där jag fick skriva om "CardHand" och "Card" klassen för allt skulle fungera.

Därefter när jag fick i upp spelet, kunde jag på börja med ändra som stilen. Jag började kopiera och modifiera stil, till att efterlikna "cyberpunk" stil.

Jag fixade också till kommenterar och kodtäckning för projektet. Samt skriv extra information på github repo.
</pre>

<h4>Krav 4</h4>
<pre>
Jag på började med att skapa en boilerplate sida för att hantera API routes till projektet.

Därefter implementerades olika API routes för poker spelet, vilket gjorde så att man kunde hämta information om spelet. Samt jag skapade också en formulär där man kunde lägga till ett kort på spelbrädet.

Jag la också till extra funktioner i PokerGame klassen för att få ut information om vilket rank rad eller kolumnen hade vid en viss index position.

Jag la också till en simpel tidtagare system, där jag sparade när användaren startade spelet och avslutade spelet. Därefter kunde jag räkna ut hur länge spelet på gick.
</pre>

<h4>Krav 5</h4>
<pre>
Gjordet ej kravet
</pre>

<h4>Krav 6</h4>
<pre>
Gjordet ej kravet
</pre>

<h4>Allmänt</h4>
<pre>
Det gick relativt bra med projektet. Däremot var det lite stressigt med hur litet tid det var till projektet, jämfört med de andra kurser. Det som tog mest tid var då poker ranking systemet. På min fritid försökte jag på att göra ett poker spel, men har aldrig lyckas eftersom poker ranking system gick aldrig bra att göra. Dock lyckades jag med detta projektet, vilket jag är glad över. Det är kanske inte den mest effektiva/snabbast system, dock fungera det.
</pre>

<h4>Avslutningsvis</h4>
<pre>
Avslutningsvis tyckte jag att hela kursen var rätt så bra. Det var många verktyg man fick lära sig, samt hur man kunde använda ett ramverket och arbete med.

Jag skulle ge kursen 8/10. Det flesta delarna gick relativt bra. Däremot var vissa delar stressiga. Till exempel i kmom04 och kmom06, där man skulle skapa massa tester, samt att få en hög poäng för "ren" kod. Annars var alla kursmoment bra och intressanta. Jag skulle definitivt rekommendera denna kursen till andra personer.
</pre>

</pre>
        </article>
    </main>
    <aside class="aside">
        <h4>Innehållsförteckning</h4>
        <ul class="toc">
            <li>
                <a href="#kmom01">
                    <span class="un">kmom01</span>
                </a>
            </li>
            <li>
                <a href="#kmom02">
                    <span class="un">kmom02</span>
                </a>
            </li>
            <li>
                <a href="#kmom03">
                    <span class="un">kmom03</span>
                </a>
            </li>
            <li>
                <a href="#kmom04">
                    <span class="un">kmom04</span>
                </a>
            </li>
            <li>
                <a href="#kmom05">
                    <span class="un">kmom05</span>
                </a>
            </li>
            <li>
                <a href="#kmom06">
                    <span class="un">kmom06</span>
                </a>
            </li>
            <li>
                <a href="#kmom10">
                    <span class="un">kmom10</span>
                </a>
            </li>
        </ul>
    </aside>
</div>
{% endblock %}
